install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
install.packages("devtools")
devtools::install_github('IRkernel/IRkernel')
install.packages("devtools")
n1 <- 15  # Double precision by default
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
c1 <- "c"
c1
typeof(c1)
c2 <- "a string of text"
c2
typeof(c2)
l1 <- TRUE
l1
typeof(l1)
l2 <- F
l2
typeof(l2)
v1 <- c(1, 2, 3, 4, 5)
v1
is.vector(v1)
v2 <- c("a", "b", "c")
v2
is.vector(v2)
v3 <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
v3
is.vector(v3)
m1 <- matrix(c(T, T, F, F, T, F), nrow = 2)
m1
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
byrow = T)
m2
# Give data, then dimensions (rows, columns, tables)
a1 <- array(c( 1:24), c(4, 3, 2))
a1
vNumeric   <- c(1, 2, 3)
vCharacter <- c("a", "b", "c")
vLogical   <- c(T, F, T)
df1 <- cbind(vNumeric, vCharacter, vLogical)
df1  # Coerces all values to most basic data type
df2 <- as.data.frame(cbind(vNumeric, vCharacter, vLogical))
df2  # Makes a data frame with three different data types
o1 <- c(1, 2, 3)
o2 <- c("a", "b", "c", "d")
o3 <- c(T, F, T, T, F)
senders <- read.csv('/home/threat/Documents/APG_TASKS/rev_assurance/Notebooks/senders.csv')
library('FactoMineR')
library(FactoMineR)
install.packages(c("FactoMineR", "factoextra", "Factoshiny", "Rcmdr"))
install.packages("FactoMineR", dependencies = TRUE)
# get names of installed packages
packs <- installed.packages()
exc <- names(packs[,'Package'])
# get available package names
av <- names(available.packages()[,1])
# create loooong string
ins <- av[!av %in% exc]
install.packages(ins)
install.packages("FactoMineR", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("Factoextra", dependencies = TRUE, INSTALL_opts = '--no-lock')
2
install.packages("factoextra", dependencies = TRUE, INSTALL_opts = '--no-lock')
warnings()
install.packages("Factoshiny", dependencies = TRUE, INSTALL_opts = '--no-lock')
library(FactoMineR)
library(factoextra)
library(Factoshiny)
install.packages(c("car", "cluster", "ellipse", "flashClust", "graphics", "grDevices", "lattice", "leaps", "MASS", "scatterplot3d", "stats", "utils", "ggplot2", "ggrepel", "missMDA", "knitr", "Factoshiny", "Factoshiny", "HDoutliers", "qha", "R.temis", "RcmdrPlugin.FactoMineR", "SensoMineR", "Xplortext", "adiv", "artMS", "bibliometrix", "CAinterprTools", "CHARGE", "CINNA", "ClustBlock", "CSFA", "DaMiRseq", "DAPAR", "denoiseR", "EMA", "factoextra", "FactoInvestigate", "fdm2id", "GDAtools", "GeneGeneInteR", "GraphPCA", "HistDAWass", "IntClust", "mdapack", "mimi", "missMDA", "MLGL", "ngsReports", "OMICsPCA", "packMBPLSDA", "pcaBootPlot", "RclusTool", "rexposome", "RNASeqR", "RSDA", "RVAideMemoire", "sbpiper", "tetraclasse", "uHMM", "wilson", "DiscriMiner", "explor", "forwards", "glmtree", "parameters", "plsdepot", "seqhandbook", "wrGraph", "Rcmdr"))
clear()
cls
library(FactoMineR)
library(factoextra)
library(Factoshiny)
senders <- read.csv('/home/threat/Documents/APG_TAS
senders <- read.csv('/home/threat/Documents/APG_TASKS/rev_assurance/Notebooks/senders.csv')
install.packages("devtools")
library("devtools")
install_github("qinwf/awesome-R")
version
sessionInfo()
browseVignettes("ggplot2")
?devtools
browseVignettes("devtools")
install.packages("KernSmooth")
library(KernSmooth)
?cor
# wd
setwd("~/Documents/Learning/Data Science Specialization R/R Programming/Week 2/Assinment/rprog_data_specdata")
source("pollutantmean.R")
polluantmean("specdata", "nitrate", id=1:900)
source("complete.R")
library(plyr) # Tools for Splitting, Applying and Combining Data
library(readr) # Read Rectangular Text Data
complete("specdata", 1:10)
source("corr.R")
corr("specdata", 300)
cor(longley)
head(longley)
source("corr.R")
corr("specdata", 300)
source("corr.R")
corr("specdata", 300)
source("corr.R")
corr("specdata", 300)
source("corr.R")
corr("specdata", 300)
source("complete.R")
source("corr.R")
corr("specdata", 300)
source("corr.R")
corr("specdata", 300)
source("corr.R")
corr("specdata", 300)
head(longley)
longley$Population
cbind(longley$Population, longley$Employed)
data.frame(cbind(longley$Population, longley$Employed))
source("corr.R")
corr("specdata", 300)
source("corr.R")
corr("specdata", 300)
corr("specdata", 100)
corr("specdata", 150)
corr("specdata", 400)
source("corr.R")
corr("specdata", 400)
source("corr.R")
corr("specdata", 400)
source("corr.R")
corr("specdata")
source("corr.R")
corr("specdata")
corr("specdata", 150)
corr("specdata", 5000)
install.packages("svMisc")
source("complete.R")
source("corr.R")
corr("specdata", 5000)
source("complete.R")
source("corr.R")
corr("specdata", 5000)
source("complete.R")
corr("specdata", 5000)
source("complete.R")
source("corr.R")
corr("specdata", 5000)
corr("specdata", 150)
source("pollutantmean.R")
polluantmean("specdata", "sulfate", id=1:10)
# wd
setwd("~/Documents/Learning/Data Science Specialization R/R Programming/Week 2/Assinment/rprog_data_specdata")
source("pollutantmean.R")
polluantmean("specdata", "sulfate", id=1:10)
polluantmean("specdata", "nitrate", id=70:72)
library(plyr) # Tools for Splitting, Applying and Combining Data
library(readr) # Read Rectangular Text Data
polluantmean("specdata", "nitrate", id=70:72)
nitrate
polluantmean("specdata", "nitrate", id=1:900)
cc <- complete("specdata", c(6,10, 20,34,100,200,310))
print(cc$nobs)
source("complete.R")
cc <- complete("specdata", c(6,10, 20,34,100,200,310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
RNGversion("3.5.1")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
source("corr.R")
cr <- corr("specdata")
cr <- sort(cr)
RNGversion("3.5.1")
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
RNGversion("3.5.1")
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
source("pollutantmean.R")
polluantmean("specdata", "sulfate", id=1:10)
View(cc)
source("pollutantmean.R")
polluantmean("specdata", "sulfate", id=1:10)
polluantmean("specdata", "nitrate", id=70:72)
polluantmean("specdata", "sulfate", id=34)
polluantmean("specdata", "nitrate")
rm(list=ls())
?gl
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok
vapply(flags, unique, numeric(1))
ok
ok
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
force(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
round(209.21429-82.63636)
debug(ls)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
round(6.588)
ls
ls()
